"""
Django settings for savor project.

Generated by 'django-admin startproject' using Django 5.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import environ
import os
from datetime import timedelta
from django.utils.translation import gettext_lazy as _

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

env = environ.Env()
# reads environment variables from the .env file
environ.Env.read_env(os.path.join(BASE_DIR, '.env'))


GOOGLE_API_KEY = env('GOOGLE_API_KEY', default=None)
DEEPL_API_KEY = env('DEEPL_API_KEY', default=None)
# languages for DeepL API translation, used by a custom management command to generate .po files for internationalization.
DEEPL_TARGET_LANGUAGES = ['AR', 'BG', 'ZH', 'CS', 'DA', 'NL', 'ET', 'FI', 'FR', 'DE', 'EL', 'HE', 'HU', 'ID', 'IT', 'JA', 'KO', 'LV', 'LT', 'NB', 'PL', 'PT', 'RO', 'RU', 'SK', 'SL', 'ES', 'SV', 'TH', 'TR', 'UK', 'VI']
DEEPL_SOURCE_LANG = "EN"


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'users',
    'recipes',
    'pantry',
    'savor',
    'widget_tweaks',
    'django_ratelimit',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    # custom middleware for app specific logic
    'savor.middleware.UserLanguageMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    # custom middleware to manage AI recipe generation based on session state.
    # placed after AuthenticationMiddleware to ensure request.user is available.
    'savor.middleware.PantryRecipeMiddleware',
]

ROOT_URLCONF = 'savor.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / "templates"],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'savor.wsgi.application'

# configures Django to print emails to the console during development.
# in production, this would be replaced with a real email backend.
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}



# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

# default language for the app
LANGUAGE_CODE = 'en'

TIME_ZONE = 'UTC'

# enables Django's internationalization system
USE_I18N = True

USE_TZ = True

LANGUAGES = [  
    ('en', _('English')),
    ('ar', _('Arabic')),
    ('bg', _('Bulgarian')),
    ('zh', _('Chinese')),
    ('cs', _('Czech')),
    ('da', _('Danish')),
    ('nl', _('Dutch')),
    ('et', _('Estonian')),
    ('fi', _('Finnish')),
    ('fr', _('French')),
    ('de', _('German')),
    ('el', _('Greek')),
    ('he', _('Hebrew')),
    ('hu', _('Hungarian')),
    ('id', _('Indonesian')),
    ('it', _('Italian')),
    ('ja', _('Japanese')),
    ('ko', _('Korean')),
    ('lv', _('Latvian')),
    ('lt', _('Lithuanian')),
    ('nb', _('Norwegian Bokm√•l')), 
    ('pl', _('Polish')),
    ('pt', _('Portuguese')),
    ('ro', _('Romanian')),
    ('ru', _('Russian')),
    ('sk', _('Slovak')),
    ('sl', _('Slovenian')),
    ('es', _('Spanish')),
    ('sv', _('Swedish')),
    ('th', _('Thai')),
    ('tr', _('Turkish')),
    ('uk', _('Ukrainian')),
    ('vi', _('Vietnamese')),
]

# specifies where Django should look for translation files.
LOCALE_PATHS = [
    BASE_DIR / 'locale',
]


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

STATICFILES_DIRS = [
    BASE_DIR / 'static', 
]

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# specifies the custom User model for authentication
AUTH_USER_MODEL = 'users.User'

# urls for authentication redirects
LOGIN_REDIRECT_URL = 'pantry:index' 
LOGOUT_REDIRECT_URL = 'login'       
LOGIN_URL = 'login'

# config for interacting with the Open Food Facts API.
OPENFOODFACTS_API = {
    # world.openfoodfacts.net : staging environment, world.openfoodfacts.org : production enviornment
     'BASE_URL': "https://world.openfoodfacts.net", # base URL for the OFF API 
     'USERNAME': "off", # username for API authentication.
     'PASSWORD': "off", # password for API authentication. 
     'USER_AGENT': "Savor/1.0 (mnm.fullmetal@gmail.com)", # user-agent header for API requests, identifying the app
     'USE_STAGING_AUTH': True,  # flag to use staging authentication credentials
}

# configures redis as the main caching backend for django
CACHES = {
    'default': {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': 'redis://127.0.0.1:6379/1', 
        'OPTIONS': {
            'CLIENT_CLASS': 'django_redis.client.DefaultClient',
            }
        }
}

# specifies a custom error handler for "django-ratelimit" when a rate limit is exceeded
RATELIMIT_ERROR_HANDLER = 'savor.utils.rate_limit_error_response'

# celery broker url pointing to redis, where celery tasks are queued
CELERY_BROKER_URL = 'redis://127.0.0.1:6379/0'

# celery result backend url also pointing to redis, where celery stores task results
CELERY_RESULT_BACKEND = 'redis://127.0.0.1:6379/0'

# specifies redbeat as scheduler for celery beat, allowing periodic tasks to be stored and managed in redis
CELERY_BEAT_SCHEDULER = 'redbeat.RedBeatScheduler'

# url for redbeat to connect to redis for storing periodic task schedules
REDBEAT_REDIS_URL = 'redis://127.0.0.1:6379/2'

# defines schedule for celery beat tasks
CELERY_BEAT_SCHEDULE = {
    'update-old-recent-recipes': {
        'task': 'recipes.tasks.update_recent_recipes_status',
        'schedule': timedelta(hours=1), # Runs every hour to clean up old recipe suggestions.
    },
    'update-facet-data': {
        'task': 'savor.tasks.update_facet_data',
        'schedule': timedelta(days=5), # Runs every 5 days to refresh cached Open Food Facts facet data.
    },
}